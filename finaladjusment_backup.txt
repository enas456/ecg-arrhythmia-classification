clear all; clc; close all;


% Load data from the first file (ECG signals)
orginal_data_ecg = readmatrix('118.csv'); % Assuming it's a comma-delimited text file, adjust if necessary

%% first  stage make the signal physical signal and normalize and filter  the signal 
% Normalize the signals in data_ecg
data_ecg_1 = (orginal_data_ecg(:,2:3) - 1024) / 200;

% Extract number of samples from the first column of data_ecg
num_samples = size(orginal_data_ecg, 1);

% Create a new matrix combining the number of samples and normalized signals
data_ecg_2 = [orginal_data_ecg(:, 1), data_ecg_1];

% Sampling frequency of the ECG signal (assumed 360 Hz for MIT-BIH Arrhythmia)
fs = 360;

% Define bandpass filter specifications
low_freq = 0.5;  % Lower cutoff frequency in Hz
high_freq =50;  % Higher cutoff frequency in Hz
nyquist_freq = fs/2;
order = 100;     % Filter order

% Design FIR bandpass filter
filter_coefficients = fir1(order, [low_freq/nyquist_freq, high_freq/nyquist_freq], 'bandpass');

% Apply the filter to the ECG signal
filtered_ecg_1 = filtfilt(filter_coefficients, 1, data_ecg_2(:,2));
filtered_ecg_2 = filtfilt(filter_coefficients, 1, data_ecg_2(:,3));

% % Normalize the filtered ECG signals
% min_val_1 = min(filtered_ecg_1);
% max_val_1 = max(filtered_ecg_1);
% normalized_filtered_ecg_1 = 2 * (filtered_ecg_1 - min_val_1) / (max_val_1 - min_val_1) - 1;
% 
% min_val_2 = min(filtered_ecg_2);
% max_val_2 = max(filtered_ecg_2);
% normalized_filtered_ecg_2 = 2 * (filtered_ecg_2 - min_val_2) / (max_val_2 - min_val_2) - 1;

% Extract data from the first column of each file
column_1 = data_ecg_2(:, 1);
column_2 = filtered_ecg_1(:, 1);
column_3 = filtered_ecg_2(:, 1);

% Determine the size of the new file
num_rows = max([numel(column_1), numel(column_2), numel(column_3)]);

% Initialize the new matrix
new_data = NaN(num_rows, 3); % Assuming you want to create a new matrix with three columns

% Insert data into the new matrix
new_data(1:numel(column_1), 1) = column_1;
new_data(1:numel(column_2), 2) = column_2;
new_data(1:numel(column_3), 3) = column_3;

%%
%% second stage to replce the + and " wuth the real label 

data_info = readtable('118annotations.txt', 'Delimiter', '\t'); % Assuming it's tab-delimited

% Access the second column of data_info
second_column_data_info = data_info{:, 2}; % Accessing the column as a cell array

% Extract numeric values from strings and retain non-numeric values
second_column_numeric = cell(size(second_column_data_info)); % Preallocate for efficiency
for i = 1:numel(second_column_data_info)
    parts = strsplit(second_column_data_info{i});
    if ~isempty(parts{1}) && all(isstrprop(parts{1}, 'digit')) % Check if the part is numeric
        second_column_numeric{i} = str2double(parts{1});
    else
        second_column_numeric{i} = second_column_data_info{i}; % Retain non-numeric value
    end
end

% Access the first column of the table
data_column = data_info(:, 1);

% Convert the table column to a cell array of strings
data_strings = table2cell(data_column);

% Initialize arrays to store the split components
time = cell(size(data_strings));
sample_type = cell(size(data_strings));
sub_chan_num = cell(size(data_strings));

% Loop through each string and split based on multiple spaces
for i = 1:numel(data_strings)
    parts = regexp(data_strings{i}, '\s+', 'split');
    time{i} = parts{1};
    sample_type{i} = parts{2};
    sub_chan_num{i} = parts{3};
end

% Create a new table from the split components
new_table = table(time, sample_type, sub_chan_num, second_column_numeric, ...
    'VariableNames', {'Time', 'Sample_Type', 'SubChanNum', 'FourthColumn'});


% Iterate over rows
for i = 1:size(new_table, 1)
    % Check if third column contains '+'
    if contains(new_table{i, 3}, '+')
        % Replace '+' with corresponding letter from fourth column
        new_table{i, 3} = new_table{i, 4};
    end
end

% Write the modified table back to a file
writetable(new_table, 'modified_table.txt');


% Iterate over rows
for i = 1:size(new_table, 1)
    % Check if third column contains '"'
    if contains(new_table{i, 3}, '"')
        % Replace '+' with corresponding letter from fourth column
        new_table{i, 3} = new_table{i, 4};
    end
    % Check if third column is empty
    if isempty(new_table{i, 3})
        % Replace empty string with corresponding letter from fourth column
        new_table{i, 3} = new_table{i, 4};
    end
end


%% ploting the signal with the annotation 

% Load data from the first file (ECG signals)
data_ecg = new_data; % Assuming it's a tab-delimited text file

% Load data from the second file (sample information)
data_info = new_table; % Assuming it's a tab-delimited text file


% Extract relevant columns
time = data_info(:, 1); % Extract as numeric array
samples_str = table2cell(data_info(:, 2)); % Extract sample column as cell array
% Convert sample strings to numeric values
samples = cellfun(@str2double, samples_str);
% disease_labels = data_info(:, 3); % Extract third column as cell array of strings


% Extract disease labels as cell array of strings
disease_labels = table2cell(data_info(:, 3));

% Convert disease labels to character array
disease_labels_char = char(disease_labels{:});



% Overlay disease labels
% Loop over the rows of the table
for i = 1:height(data_info)
    index = find(data_ecg(:, 1) == samples(i));
    if ~isempty(index)
        label = disease_labels_char(i, :); % Extract the letter label
        text(data_ecg(index, 1), data_ecg(index, 2), label, 'Color', 'blue', 'FontSize', 10); % Assuming MLII channel
    end
end

%% third stage segmentation 
% Convert samples column from string to numeric
data_info.Sample_Type = str2double(data_info.Sample_Type);

% Initialize new variables
new_data = zeros(size(data_info, 1), 2);

% Iterate over each row in data_info
for i = 1:size(data_info, 1)
    % Get the sample value
    sample = data_info.Sample_Type(i);
    
    % Subtract 150 and add 150
    sample_sub_180 = sample - 180;
    sample_add_180 = sample + 180;
    
    % Store in new_data
    new_data(i, 1) = sample_sub_180;
    new_data(i, 2) = sample_add_180;
end

% Convert new_data to table
new_data_table = array2table(new_data, 'VariableNames', {'Subtracted', 'Added'});

% Get labels from data_info and clean non-numeric characters
labels = data_info.SubChanNum;


% Create a table with cleaned labels
labels_table = table(labels);

% Concatenate new_data_table and labels_table
new_table_1 = [new_data_table, labels_table];

%% if 1 not work use this 
%%
% Initialize extracted_data_ecg
extracted_data_ecg = cell(size(new_table_1, 1), 4);

% Extract data from data_ecg based on ranges in new_table_1
for i = 1:size(new_table_1, 1)
    % Determine the range for rows to extract
    start_sample = new_table_1{i, 1};
    end_sample = new_table_1{i, 2};
    
    % Find the indices in data_ecg for the current sample range
    start_index = find(data_ecg(:, 1) == start_sample, 1);
    end_index = find(data_ecg(:, 1) == end_sample, 1);
    
    % Extract rows from data_ecg
    if isempty(end_index)
        extracted_data_ecg{i, 1} = data_ecg(start_index:end, 1); % Sample numbers
        extracted_data_ecg{i, 2} = data_ecg(start_index:end, 2); % Channel 1
        extracted_data_ecg{i, 3} = data_ecg(start_index:end, 3); % Channel 2
        num_rows = size(data_ecg(start_index:end, 1), 1);
        labels_cell = cell(num_rows, 1);
        labels_cell(:) = {new_table_1{i, 3}}; % Replicate label
        extracted_data_ecg{i, 4} = labels_cell; % Labels
    else
        extracted_data_ecg{i, 1} = data_ecg(start_index:end_index-1, 1); % Sample numbers
        extracted_data_ecg{i, 2} = data_ecg(start_index:end_index-1, 2); % Channel 1
        extracted_data_ecg{i, 3} = data_ecg(start_index:end_index-1, 3); % Channel 2
        num_rows = end_index - start_index;
        labels_cell = cell(num_rows, 1);
        labels_cell(:) = {new_table_1{i, 3}}; % Replicate label
        extracted_data_ecg{i, 4} = labels_cell; % Labels
    end
end

%% Data Processing and Labeling for ECG Signal Analysis
% Initialize new_data
new_data = cell(size(extracted_data_ecg, 1) - 2, 1);

for row = 5:size(extracted_data_ecg, 1)
    % Extract and transpose the data for the first channel (second row) and put it in the second row of new_data
    new_data{row-2} = {extracted_data_ecg{row, 3}'}; % Second channel signal

    % Extract and transpose the data for the second channel (third row) and put it in the first row of new_data
    new_data{row-2} = [extracted_data_ecg{row, 2}'; new_data{row-2}]; % First channel signal 

    % Extract labels from the fourth column of extracted_data_ecg
    labels = extracted_data_ecg{row, 4};
    labels = labels(1:2); % Take only two rows of labels

    % Convert labels to cells if they are not already
    for i = 1:numel(labels)
        if ischar(labels{i})
            labels{i} = {labels{i}};
        end
    end

    % Append labels to each array inside new_data
    for i = 1:numel(new_data{row-2})
        % Repeat each row of labels to match the size of the corresponding array inside new_data
        repeated_labels = repmat(labels{i}, size(new_data{row-2}{i}, 1), 1);

        % Append labels to the end of the corresponding array inside new_data
        new_data{row-2}{i} = [new_data{row-2}{i}, repeated_labels];
    end
end
%%  Extract Data and Labels from Nested Cell Array and Convert to Table
% Initialize an empty cell array to store the extracted data
extracted_data = cell(size(new_data, 1), 2);

% Loop through each row of the main cell variable
for i = 1:size(new_data, 1)
    % Extract the nested cell containing the data and labels
    nested_cell = new_data{i};

    % Extract the data from the nested cell (first column)
    data = nested_cell{1};

    % Extract the labels from the nested cell (second column)
    labels = nested_cell{2};

    % Create a new cell array to store the extracted data and labels
    extracted_data{i, 1} = data;
    extracted_data{i, 2} = labels;
end

% Convert the cell array into a table
final_data_set = cell2table(extracted_data, 'VariableNames', {'Data', 'Labels'});

final_data_set.Properties.VariableNames(2) = "V5";
final_data_set.Properties.VariableNames(1) = "MII2";

%% Convert Table Data into a Nested Cell Array
% Initialize final edit data set
final_edit_data_set = cell(2*size(final_data_set, 1), 1);

% Loop through each row of final_data_set
for i = 1:size(final_data_set, 1)
    % Extract MII2 data from the current row
    MII2_data = final_data_set.MII2{i};
    MII2_label = final_data_set.MII2{i};
    
    % Extract V5 data from the current row
    V5_data = final_data_set.V5{i};
    V5_label = final_data_set.V5{i};
    
    % Calculate indices for final_edit_data_set
    idx = (i-1)*2 + 1;
    idx_label = (i-1)*2 + 2;
    
    % Assign MII2 data and label to final_edit_data_set
    final_edit_data_set{idx} = MII2_data;
    final_edit_data_set{idx_label} = MII2_label;
    
    % Assign V5 data and label to final_edit_data_set
    final_edit_data_set{idx+1} = V5_data;
    final_edit_data_set{idx_label} = V5_label;
end



%%
final_filtered_and_normalized_ecg_signal = [];  % Initialize the final variable

% Iterate over each cell in final_edit_data_set
for i = 1:length(final_edit_data_set)
    % Extract the current cell
    current_cell = final_edit_data_set{i};
    
    % Check if the length of the current cell is greater than or equal to 360
    if size(current_cell, 2) >= 360
        % Append the current cell to the new variable
        final_filtered_and_normalized_ecg_signal = [final_filtered_and_normalized_ecg_signal; current_cell];
    end
end

signal_data = final_filtered_and_normalized_ecg_signal;




%%
fourth_column = extracted_data_ecg(3:end, 4);

% Find the minimum length among all cells in fourth_column
min_length = min(cellfun(@length, fourth_column));

% Find the index of the shortest cell
shortest_cell_index = find(cellfun(@length, fourth_column) == min_length);

% Remove the shortest cell from fourth_column
fourth_column(shortest_cell_index) = [];

% Initialize the final labels variable
final_labels = {};

% Iterate over each cell in fourth_column
for i = 1:length(fourth_column)
    % Extract the first two rows from the current cell
    current_cell = fourth_column{i};
    first_two_rows = current_cell(1,:);
    
    % Append the first two rows to the final labels variable
    final_labels = [final_labels; first_two_rows];
end

% Convert cell array to string array
final_labels_string = string(final_labels);

% Convert string array to categorical array
final_labels_categorical = categorical(final_labels_string);


%%



%% Combine Consecutive Cells into One Cell Containing Two Rows
% Determine the number of cells in final_edit_data_set
num_cells = numel(final_edit_data_set);

% Initialize the cell array to store the combined rows
signal_ecg = cell(ceil(num_cells/2), 1);

% Iterate over each pair of cells in final_edit_data_set
for i = 1:2:num_cells
    % Extract the first and second rows from the current and next cells
    first_row = final_edit_data_set{i};
    
    % Check if there's a next cell available
    if i+1 <= num_cells
        second_row = final_edit_data_set{i+1};
        
        % Concatenate the rows vertically and store in signal_ecg
        signal_ecg{(i+1)/2} = [first_row; second_row];
    else
        % Store only the first row if no next cell available
        signal_ecg{(i+1)/2} = first_row;
    end
end
% Exclude the last cell if its size is not 2x360
if size(final_edit_data_set{end}, 1) ~= 2 || size(final_edit_data_set{end}, 2) ~= 360
    signal_ecg = signal_ecg(1:end-1);
end



%% Save Final Filtered and Normalized ECG Signal to File Using uiputfile
% Assuming you want to select the path and name interactively using uiputfile
[filename, pathname] = uiputfile('subject101.mat', 'D:\gene_staj\Final dataset with new approach');

% Check if the user canceled the operation
if isequal(filename,0) || isequal(pathname,0)
    disp('User canceled the operation. File not saved.');
else
    % Construct the full file path
    fullFilePath = fullfile(pathname, filename);
    
    % Save the variable to the specified file
    save(fullFilePath, 'signal_ecg');
    
    disp(['File saved successfully as: ', fullFilePath]);
end



%% Save final_labels_categorical to File Using uiputfile
% Assuming you want to select the path and name interactively using uiputfile
[filename, pathname] = uiputfile('label1.mat', 'D:\gene_staj\Final dataset with new approach');

% Check if the user canceled the operation
if isequal(filename,0) || isequal(pathname,0)
    disp('User canceled the operation. File not saved.');
else
    % Construct the full file path
    fullFilePath = fullfile(pathname, filename);
    
    % Save the variable to the specified file
    save(fullFilePath, 'final_labels_categorical');
    
    disp(['File saved successfully as: ', fullFilePath]);
end
